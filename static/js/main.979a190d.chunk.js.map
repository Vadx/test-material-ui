{"version":3,"sources":["components/Login/Login.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","paper","maxWidth","padding","spacing","margin","title","marginBottom","subtitle","color","instagram","background","youtube","textField","width","Login","classes","react_default","a","createElement","Grid","container","alignItems","justify","style","marginTop","item","display","Paper","className","flexDirection","justifyContent","Box","Typography","variant","component","fontFamily","lineHeight","Button","size","Link","href","TextField","id","label","type","name","autoComplete","textAlign","paddingTop","outerTheme","createMuiTheme","palette","primary","main","contrastText","secondary","App","ThemeProvider","StylesProvider","injectFirst","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.979a190d.chunk.js","sourcesContent":["import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport {Paper, Typography, Grid, Button, Box, TextField, Link} from '@material-ui/core'\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    maxWidth: 380,\n    padding: theme.spacing(3, 2),\n    margin: theme.spacing(2, 2),\n  },\n  title: {\n    marginBottom: 30,\n  },\n  subtitle: {\n    color: '#8d919a',\n  },\n  instagram: {\n    background: '#365888',\n    color: '#fff',\n    marginBottom: 20\n  },\n  youtube: {\n    background: '#d44839',\n    color: '#fff'\n  },\n  textField: {\n    width: '100%'\n  },\n}))\n\nexport function Login () {\n  const classes = useStyles()\n  return (\n    <Grid \n      container\n      alignItems=\"stretch\"\n      justify=\"center\"\n      style={{ marginTop: '5%'}}>\n      <Grid item style={{display: 'flex'}}>\n          <Paper className={classes.paper} style={{display: 'flex', flexDirection: 'column', justifyContent: 'space-between'}}>\n            <Box marginBottom=\"40px\">\n              <Typography variant=\"h6\" component=\"h3\" className={classes.title}>I'm an Influencer</Typography>\n              <Box marginBottom=\"30px\" fontFamily=\"fontFamily\" lineHeight=\"1.5\" className={classes.subtitle}>You make great content on YouTube and Instagram and are looking for sponsorship opportunities from cool brands to support your channel.</Box>\n              <Box fontFamily=\"fontFamily\" lineHeight=\"1.5\" className={classes.subtitle}>Signup or login with your social media accounts.</Box>\n            </Box>\n            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"stretch\">\n              <Button variant=\"contained\" size=\"large\" className={classes.instagram}>Instagram</Button>\n              <Button variant=\"contained\" size=\"large\" className={classes.youtube}>Youtube</Button>\n            </Box>\n          </Paper>\n        </Grid>\n        <Grid item>\n          <Paper className={classes.paper}>\n            <Typography variant=\"h6\" component=\"h3\" className={classes.title}>I'm a Brand</Typography>\n            <Box fontFamily=\"fontFamily\" lineHeight=\"1.5\" className={classes.subtitle}>Youâ€™re looking for influencers to promote your company. If you don't have an account yet, <Link href='#'>signup here</Link>.</Box>\n            <TextField\n              id=\"outlined-email-input\"\n              label=\"Email\"\n              className={classes.textField}\n              type=\"email\"\n              name=\"email\"\n              autoComplete=\"email\"\n              margin=\"normal\"\n              variant=\"outlined\"\n            />\n            <TextField\n              id=\"outlined-password-input\"\n              label=\"Password\"\n              className={classes.textField}\n              type=\"password\"\n              autoComplete=\"current-password\"\n              margin=\"normal\"\n              variant=\"outlined\"\n            />\n            <Box textAlign=\"right\">\n              <Link href=\"#\" variant=\"caption\">Forget password?</Link>\n            </Box>  \n            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"stretch\" paddingTop=\"15px\">\n              <Button size=\"large\" variant=\"contained\" color=\"primary\">Sign in</Button>\n            </Box>\n          </Paper>\n        </Grid>\n    </Grid>\n  )\n}\n","import React from 'react'\n// import { BrowserRouter as Router, Route, Link } from \"react-router-dom\"\n\nimport { createMuiTheme } from '@material-ui/core/styles'\nimport { ThemeProvider } from '@material-ui/styles'\nimport { StylesProvider } from '@material-ui/styles'\n\n// import { Header } from './components/Header'\n// import { TopStatusBar } from './components/TopStatusBar'\n// import { CampaignsTab } from './components/CampaignsTab'\nimport { Login } from './components/Login'\n\nconst outerTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#3baaa6',\n      contrastText: '#fff'\n    },\n    secondary: {\n      main: '#e95b5b',\n      contrastText: '#fff'\n    }\n  }\n})\n\nfunction App() {\n  return (\n    <ThemeProvider theme={outerTheme}>\n      <StylesProvider injectFirst>\n          {/* <Header />\n          <TopStatusBar />\n          <CampaignsTab /> */}\n          <Login />\n      </StylesProvider>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}